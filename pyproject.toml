[project]
name = "bumpver"
description = "Bump version numbers in project files."
readme = {file = "README.md", content-type = "text/markdown"}
keywords = [
    "version",
    "bumpver",
    "calver",
    "semver",
    "versioning",
    "bumpversion pep440",
]
version = "2023.1129"
license = {file = "LICENSE"}
requires-python = ">=3.9"
authors = [
    {"author" = "Manuel Barkhau", "email" = "mbarkhau@gmail.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "click>=7.1.2",
    "colorama>=0.4",
    "lexid>=2021.1006",
    "toml>=0.10.2",
    "typing>=3.10.0.0",
]
[project.urls]
homepage      = "https://github.com/mbarkhau/bumpver"
repository    = "https://github.com/mbarkhau/bumpver"

[project.scripts] # CLI
bumpver = "bumpver.cli:cli"


[dependency-groups]
dev = [
    "graphviz>=0.20.3",
    "ipython>=8.18.1",
    "pipdeptree>=2.23.4",
    "pretty-traceback>=2024.1021",
    "pudb>=2024.1.3",
    "py-spy>=0.4.0",
    "pytest-cache>=1.0",
    "q>=2.7",
    "rich>=13.9.4",
    "snakeviz>=2.2.2",
]
integration = [
    "flake8>=4.0.1",
    "flake8-2020>=1.6.1",
    "flake8-bugbear>=23.3.12",
    "flake8-builtins>=2.5.0",
    "flake8-comprehensions>=3.16.0",
    "flake8-docstrings>=1.7.0",
    "flake8-junit-report>=2.1.0",
    "isort>=5.13.2",
    "lib3to6>=202107.1047",
    "lxml>=5.3.0",
    "md-toc>=9.0.0",
    "mypy-extensions==1.0.0",
    "mypy==1.4.1",
    "pip>=24.3.1",
    "pycalver>=202010.1043",
    "pydocstyle<4",
    "pylint-ignore>=2020.1013",
    "pylint==2.12.1",
    "pytest>=8.3.3 ; python_full_version >= '3.5'",
    "pytest-cov>=6.0.0",
    "pytest-html<2.0 ; python_full_version < '3.5'",
    "pytest-html==3.2 ; python_full_version >= '3.5'",
    "pytest<5.0 ; python_full_version < '3.5'",
    "readme-renderer[md]>=44.0",
    "straitjacket>=202008.1016",
    "twine>=5.1.1",
    "types-click>=7.1.8",
    "types-toml>=0.10.8.20240310",
]

[tool.ruff]
line-length = 110
indent-width = 4

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true


[tool.mypy]
check_untyped_defs     = true
disallow_untyped_calls = true
follow_imports         = "silent"
strict_optional        = true
error_summary          = false
ignore_missing_imports = true
show_error_codes       = true
warn_unreachable       = true
warn_return_any        = true
warn_unused_ignores    = true
warn_redundant_casts   = true


[tool.isort]
known_first_party = "bumpver"
known_third_party = ["click","lexid", "packaging"]
force_single_line = true
length_sort       = true


[flake8]
max-line-length = 100
max-complexity = 12
ignore = [
    "C812", # Missing trailing comma (handled by sjfmt)
    "E201", # No whitespace after paren open "("
    "E202", # No whitespace before paren ")"
    "E203", # Whitespace before ":"
    "E221", # Multiple spaces before operator
    "E222", # Multiple spaces after operand
    "E231", # Missing whitespace after ','
    "E241", # Multiple spaces after ':'
    "E251", # Spaces around keyword/parameter equals
    "E272", # Multiple spaces before keyword
    "E501", # Line too long (B950 is used instead)
    "W503", # Line break before binary op
    "W504", # Line break after binary op
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function

    # D104, # Missing docstring in public package
    # D105, # Missing docstring in magic method
    "D107",   # Missing docstring on __init__
    "D202", # No blank lines allowed after function docstring
    "D400", # First line should end in a period
    "D401", # First line should be in imperative mood
]
select = ["A","AAA","D","C","E","F","W","H","B","D212","D404","D405","D406","B901","B950","YTT"]
exclude = [".git", "__pycache__", ".eggs/", "dist/", ".mypy_cache"]


[tool.pylint]
score   = false
reports = false
jobs    = 4

# Set the output format. Available formats are text, parseable, colorized,
# msvs (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format = "colorized"

# Maximum number of locals for function / method body
max-locals = 17

# Maximum number of arguments for function / method
max-args = 9

# Maximum number of branch for function / method body
max-branches = 14

good-names = ["logger","i","ex"]

# These are packages that are implemented as c extensions and
# which pylint cannot do introspection on.
extension-pkg-whitelist = ["numpy","pandas","lxml","PIL","sklearn","pyblake2"]
notes                   = ["TODO","FIXME","XXX","SLOW","BUG"]

# similarities/duplicaition checker
min-similarity-lines = 4
ignore-comments      = true
ignore-docstrings    = true
ignore-imports       = true

ignored-argument-names = ["args", "kwargs"]

# https://pylint.pycqa.org/en/stable/technical_reference/features.html
disable = [
    "bad-continuation",
    "bad-whitespace",
    "line-too-long",
    "logging-not-lazy",
    "logging-fstring-interpolation",
    "no-else-return",
    "no-else-raise",
    "too-few-public-methods",
    "missing-docstring",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "raise-missing-from",
    "duplicate-code",
    "ungrouped-imports",
]

generated-members = [
    "(_replace|_asdict|_fields)", # members of typing.NamedTuple
]


[tool.pytest]
addopts = [
    "--doctest-modules",
    "--ignore",
    "test/fixtures/hooks",
    "--ignore",
    "compat_test/fixtures/hooks",
]


[bumpver]
current_version = "2023.1129"
version_pattern = "YYYY.BUILD[-TAG]"
commit_message  = "bump {old_version} -> {new_version}"
commit          = true
tag             = true
push            = true

[bumpver.file_patterns]
"bootstrapit.sh"          = 'PACKAGE_VERSION="{version}"'
"setup.cfg"               = 'current_version = "{version}"'
"pyproject.toml"          = 'current_version = "{version}"'
"setup.py"                = 'version="{pep440_version}",$'
"src/bumpver/__init__.py" = '^__version__ = "{version}"$'
"src/bumpver/cli.py"      = '@click.version_option(version="{version}")'
"README.md"               = [
    # "\[CalVer {version}\]",
    "img.shields.io/static/v1.svg?label=CalVer&message={version}&color=blue",
    "Successfully installed bumpver-{pep440_version}",
]
